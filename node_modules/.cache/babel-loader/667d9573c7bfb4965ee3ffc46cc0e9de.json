{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NGK\\\\Downloads\\\\entain-automation-coding-task\\\\entain-automation-coding-task\\\\src\\\\index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { resolve, parse, join } from 'path';\nimport { readFileSync } from 'fs';\nimport * as glob from 'glob';\nimport slash from 'slash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 18,\n  columnNumber: 3\n}, this));\nconst extGlobs = '{json,txt}';\nconst fileGlob = '{*.,}{get,post,put,delete}**';\nexport const installPlugin = (on, config) => {\n  const mocksCache = new Map();\n  on('task', {\n    getMocks: async options => {\n      const mocksFolder = options.mocksFolder || 'mocks';\n      const cwd = resolve(config.fixturesFolder, mocksFolder);\n      const apiPath = options.apiPath || '/api/';\n      const cache = 'cache' in options ? options.cache : true;\n      if (cache && mocksCache.has(mocksFolder)) return mocksCache.get(mocksFolder);\n      const mockFiles = [];\n      glob.sync(`**/${fileGlob}.${extGlobs}`, {\n        cwd\n      }).forEach(path => {\n        const unescapedPath = path.replace(/__/g, '*').replace(/--/g, '?');\n        let {\n          dir,\n          name\n        } = parse(unescapedPath);\n\n        if (name.includes('.')) {\n          const s = name.split('.');\n          dir += s[0];\n          name = s[1];\n        }\n\n        const sp = name.split('-');\n        let method = sp[0];\n        const alt = sp[1];\n        method = method.toUpperCase();\n        const fixture = slash(join(mocksFolder, path));\n        const url = slash(join(apiPath, dir));\n        const alias = alt ? `${method}:${dir}:${alt}` : `${method}:${dir}`;\n        mockFiles.push({\n          alt,\n          alias,\n          matcher: {\n            method,\n            url\n          },\n          handler: {\n            fixture\n          }\n        });\n      });\n      glob.sync('**/options.json', {\n        cwd\n      }).forEach(path => {\n        const raw = readFileSync(join(cwd, path));\n        const opts = JSON.parse(String(raw));\n        const {\n          dir\n        } = parse(path);\n        const dirEscaped = dir.replace(/__/g, '*');\n        opts.forEach(opt => {\n          opt.matcher ||= {};\n          opt.handler ||= {};\n          const {\n            matcher,\n            handler\n          } = opt;\n          matcher.method ||= 'GET';\n          matcher.method = matcher.method.toUpperCase();\n\n          if (!(matcher.url && matcher.url.startsWith(apiPath))) {\n            matcher.url = join(apiPath, dirEscaped + (matcher.url || ''));\n          }\n\n          matcher.url = slash(matcher.url);\n\n          if (!handler.body && !handler.fixture) {\n            handler.fixture = matcher.method.toLowerCase();\n          }\n\n          if (handler.fixture) {\n            handler.fixture = slash(join(mocksFolder, dir, handler.fixture));\n          }\n\n          opt.alias ||= `${matcher.method}:${matcher.url.replace(slash(apiPath), '')}`;\n          mockFiles.push(opt);\n        });\n      });\n      mocksCache.set(mocksFolder, mockFiles);\n      return mockFiles;\n    }\n  });\n};","map":{"version":3,"names":["React","ReactDOM","App","resolve","parse","join","readFileSync","glob","slash","root","createRoot","document","getElementById","render","extGlobs","fileGlob","installPlugin","on","config","mocksCache","Map","getMocks","options","mocksFolder","cwd","fixturesFolder","apiPath","cache","has","get","mockFiles","sync","forEach","path","unescapedPath","replace","dir","name","includes","s","split","sp","method","alt","toUpperCase","fixture","url","alias","push","matcher","handler","raw","opts","JSON","String","dirEscaped","opt","startsWith","body","toLowerCase","set"],"sources":["C:/Users/NGK/Downloads/entain-automation-coding-task/entain-automation-coding-task/src/index.tsx"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { resolve, parse, join } from 'path';\nimport { readFileSync } from 'fs';\nimport * as glob from 'glob';\nimport {\n  GenericStaticResponse,\n  RouteMatcherOptionsGeneric,\n} from 'cypress/types/net-stubbing';\nimport slash from 'slash';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <App />\n);\nconst extGlobs = '{json,txt}';\nconst fileGlob = '{*.,}{get,post,put,delete}**';\ninterface Mocks {\n  alt: string;\n  alias: string;\n\n  matcher: RouteMatcherOptionsGeneric<string>;\n  handler: GenericStaticResponse<string, string>;\n}\n\nexport interface Config {\n  fixturesFolder: string;\n}\n\nexport interface Options {\n  mocksFolder: string;\n  apiPath: string;\n  cache: boolean;\n}\n\nexport const installPlugin = (\n  on: Cypress.PluginEvents,\n  config: Config\n): void => {\n  const mocksCache = new Map<string, Mocks[]>();\n\n  on('task', {\n    getMocks: async (options: Partial<Options>) => {\n      const mocksFolder = options.mocksFolder || 'mocks';\n      const cwd = resolve(config.fixturesFolder, mocksFolder);\n      const apiPath = options.apiPath || '/api/';\n      const cache = 'cache' in options ? options.cache : true;\n\n      if (cache && mocksCache.has(mocksFolder))\n        return mocksCache.get(mocksFolder);\n\n      const mockFiles: Mocks[] = [];\n\n      glob\n        .sync(`**/${fileGlob}.${extGlobs}`, { cwd })\n        .forEach((path: string) => {\n          const unescapedPath = path.replace(/__/g, '*').replace(/--/g, '?');\n          let { dir, name } = parse(unescapedPath);\n          if (name.includes('.')) {\n            const s = name.split('.');\n            dir += s[0];\n            name = s[1];\n          }\n          const sp = name.split('-');\n          let method = sp[0];\n          const alt = sp[1];\n          method = method.toUpperCase();\n          const fixture = slash(join(mocksFolder, path));\n          const url = slash(join(apiPath, dir));\n          const alias = alt ? `${method}:${dir}:${alt}` : `${method}:${dir}`;\n\n          mockFiles.push({\n            alt,\n            alias,\n            matcher: {\n              method,\n              url,\n            },\n            handler: {\n              fixture,\n            },\n          });\n        });\n\n      glob.sync('**/options.json', { cwd }).forEach((path: string) => {\n        const raw = readFileSync(join(cwd, path));\n        const opts = JSON.parse(String(raw));\n        const { dir } = parse(path);\n        const dirEscaped = dir.replace(/__/g, '*');\n\n        opts.forEach((opt: Mocks) => {\n          opt.matcher ||= {};\n          opt.handler ||= {};\n\n          const { matcher, handler } = opt;\n\n          matcher.method ||= 'GET';\n          matcher.method = matcher.method.toUpperCase();\n\n          if (!(matcher.url && matcher.url.startsWith(apiPath))) {\n            matcher.url = join(apiPath, dirEscaped + (matcher.url || ''));\n          }\n          matcher.url = slash(matcher.url);\n\n          if (!handler.body && !handler.fixture) {\n            handler.fixture = matcher.method.toLowerCase();\n          }\n          if (handler.fixture) {\n            handler.fixture = slash(join(mocksFolder, dir, handler.fixture));\n          }\n\n          opt.alias ||= `${matcher.method}:${matcher.url.replace(\n            slash(apiPath),\n            ''\n          )}`;\n\n          mockFiles.push(opt);\n        });\n      });\n\n      mocksCache.set(mocksFolder, mockFiles);\n      return mockFiles;\n    },\n  });\n};\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}