{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { NEXT_RACES_API_ENDPOINT, RACING_CATEGORIES } from \"../constants\";\nexport const usePollRaces = filters => {\n  _s();\n\n  const [unfilteredRaces, setUnfilteredRaces] = useState([]);\n  const [races, setRaces] = useState([]); // Initial loading state\n\n  const [isLoading, setIsLoading] = useState(true); // Filter races by selected category filters and return first 5 races\n\n  const filterRaces = races => {\n    const currentTime = new Date().getTime();\n    return races.filter(race => {\n      return filters[race.categoryId] && race.advertisedStart.getTime() - currentTime > -300000;\n    }).slice(0, 5);\n  }; // Sort races by advertised start time (chronologically descending)\n\n\n  const sortRaces = races => races.sort((a, b) => a.advertisedStart.getTime() - b.advertisedStart.getTime()); // Fetch the next races for all racing categories to prevent multiple network calls when filters changed\n\n\n  const fetchRaces = async () => {\n    const encodedCategoryIds = encodeURIComponent(JSON.stringify(RACING_CATEGORIES));\n    const url = `${NEXT_RACES_API_ENDPOINT}?count=5&categories=${encodedCategoryIds}`;\n    const requestInfo = {\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    };\n    const response = await (await fetch(url, requestInfo)).json();\n    const listRaces = Object.values(response.race_summaries).map(rawRace => ({\n      raceId: rawRace.race_id,\n      meetingName: rawRace.meeting_name,\n      raceNumber: rawRace.race_number,\n      advertisedStart: new Date(rawRace.advertised_start),\n      categoryId: rawRace.category_id\n    }));\n    const sortedRaces = sortRaces(listRaces);\n    setUnfilteredRaces(sortedRaces);\n    setIsLoading(false);\n  }; // Poll for races every 15 seconds\n\n\n  useEffect(() => {\n    fetchRaces();\n    setInterval(async () => {\n      await fetchRaces();\n    }, 15000); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Filter races when category filters changed\n\n  useEffect(() => {\n    setRaces(filterRaces(unfilteredRaces)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filters, unfilteredRaces]);\n  return {\n    races,\n    isLoading\n  };\n};\n\n_s(usePollRaces, \"+tbTBIoBo+WgfJXTOcYlzl19u20=\");","map":{"version":3,"names":["useEffect","useState","NEXT_RACES_API_ENDPOINT","RACING_CATEGORIES","usePollRaces","filters","unfilteredRaces","setUnfilteredRaces","races","setRaces","isLoading","setIsLoading","filterRaces","currentTime","Date","getTime","filter","race","categoryId","advertisedStart","slice","sortRaces","sort","a","b","fetchRaces","encodedCategoryIds","encodeURIComponent","JSON","stringify","url","requestInfo","headers","Headers","response","fetch","json","listRaces","Object","values","race_summaries","map","rawRace","raceId","race_id","meetingName","meeting_name","raceNumber","race_number","advertised_start","category_id","sortedRaces","setInterval"],"sources":["C:/Users/NGK/Downloads/entain-automation-coding-task/entain-automation-coding-task/src/hooks/usePollRaces.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { NEXT_RACES_API_ENDPOINT, RACING_CATEGORIES } from \"../constants\";\nimport { NextRacesCategoryGroupResponse } from \"../types/api\";\nimport { RacingCategoryFilters, ListRace } from \"../types/racing\";\n\nexport const usePollRaces = (filters: RacingCategoryFilters): { races: ListRace[], isLoading: boolean } => {\n  const [unfilteredRaces, setUnfilteredRaces] = useState<ListRace[]>([]);\n  const [races, setRaces] = useState<ListRace[]>([]);\n\n  // Initial loading state\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Filter races by selected category filters and return first 5 races\n  const filterRaces = (races: ListRace[]): ListRace[] => {\n    const currentTime = new Date().getTime();\n\n    return races.filter((race) =>  {\n      return filters[race.categoryId] && race.advertisedStart.getTime() - currentTime > -300_000;\n    }).slice(0, 5);\n  }\n\n  // Sort races by advertised start time (chronologically descending)\n  const sortRaces = (races: ListRace[]): ListRace[] => races.sort((a, b) => a.advertisedStart.getTime() - b.advertisedStart.getTime());\n\n  // Fetch the next races for all racing categories to prevent multiple network calls when filters changed\n  const fetchRaces = async (): Promise<void> => {\n    const encodedCategoryIds = encodeURIComponent(JSON.stringify(RACING_CATEGORIES));\n    const url = `${NEXT_RACES_API_ENDPOINT}?count=5&categories=${encodedCategoryIds}`;\n\n    const requestInfo = {\n      headers: new Headers({ 'Content-Type': 'application/json' }),\n    };\n\n    const response = await (await fetch(url, requestInfo)).json() as NextRacesCategoryGroupResponse;\n\n    const listRaces = Object.values(response.race_summaries).map<ListRace>((rawRace) => ({\n      raceId: rawRace.race_id,\n      meetingName: rawRace.meeting_name,\n      raceNumber: rawRace.race_number,\n      advertisedStart: new Date(rawRace.advertised_start),\n      categoryId: rawRace.category_id,\n    }));\n\n    const sortedRaces = sortRaces(listRaces);\n\n    setUnfilteredRaces(sortedRaces);\n    setIsLoading(false);\n  }\n\n  // Poll for races every 15 seconds\n  useEffect(() => {\n    fetchRaces();\n    setInterval(async () => {\n      await fetchRaces();\n    }, 15000);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Filter races when category filters changed\n  useEffect(() => {\n    setRaces(filterRaces(unfilteredRaces));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filters, unfilteredRaces]);\n\n  return { races, isLoading };\n}"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,uBAAT,EAAkCC,iBAAlC,QAA2D,cAA3D;AAIA,OAAO,MAAMC,YAAY,GAAIC,OAAD,IAA+E;EAAA;;EACzG,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAa,EAAb,CAAtD;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAa,EAAb,CAAlC,CAFyG,CAIzG;;EACA,MAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C,CALyG,CAOzG;;EACA,MAAMW,WAAW,GAAIJ,KAAD,IAAmC;IACrD,MAAMK,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;IAEA,OAAOP,KAAK,CAACQ,MAAN,CAAcC,IAAD,IAAW;MAC7B,OAAOZ,OAAO,CAACY,IAAI,CAACC,UAAN,CAAP,IAA4BD,IAAI,CAACE,eAAL,CAAqBJ,OAArB,KAAiCF,WAAjC,GAA+C,CAAC,MAAnF;IACD,CAFM,EAEJO,KAFI,CAEE,CAFF,EAEK,CAFL,CAAP;EAGD,CAND,CARyG,CAgBzG;;;EACA,MAAMC,SAAS,GAAIb,KAAD,IAAmCA,KAAK,CAACc,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACJ,eAAF,CAAkBJ,OAAlB,KAA8BS,CAAC,CAACL,eAAF,CAAkBJ,OAAlB,EAAnD,CAArD,CAjByG,CAmBzG;;;EACA,MAAMU,UAAU,GAAG,YAA2B;IAC5C,MAAMC,kBAAkB,GAAGC,kBAAkB,CAACC,IAAI,CAACC,SAAL,CAAe1B,iBAAf,CAAD,CAA7C;IACA,MAAM2B,GAAG,GAAI,GAAE5B,uBAAwB,uBAAsBwB,kBAAmB,EAAhF;IAEA,MAAMK,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIC,OAAJ,CAAY;QAAE,gBAAgB;MAAlB,CAAZ;IADS,CAApB;IAIA,MAAMC,QAAQ,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACL,GAAD,EAAMC,WAAN,CAAZ,EAAgCK,IAAhC,EAAvB;IAEA,MAAMC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAcL,QAAQ,CAACM,cAAvB,EAAuCC,GAAvC,CAAsDC,OAAD,KAAc;MACnFC,MAAM,EAAED,OAAO,CAACE,OADmE;MAEnFC,WAAW,EAAEH,OAAO,CAACI,YAF8D;MAGnFC,UAAU,EAAEL,OAAO,CAACM,WAH+D;MAInF7B,eAAe,EAAE,IAAIL,IAAJ,CAAS4B,OAAO,CAACO,gBAAjB,CAJkE;MAKnF/B,UAAU,EAAEwB,OAAO,CAACQ;IAL+D,CAAd,CAArD,CAAlB;IAQA,MAAMC,WAAW,GAAG9B,SAAS,CAACgB,SAAD,CAA7B;IAEA9B,kBAAkB,CAAC4C,WAAD,CAAlB;IACAxC,YAAY,CAAC,KAAD,CAAZ;EACD,CAtBD,CApByG,CA4CzG;;;EACAX,SAAS,CAAC,MAAM;IACdyB,UAAU;IACV2B,WAAW,CAAC,YAAY;MACtB,MAAM3B,UAAU,EAAhB;IACD,CAFU,EAER,KAFQ,CAAX,CAFc,CAKhB;EACC,CANQ,EAMN,EANM,CAAT,CA7CyG,CAqDzG;;EACAzB,SAAS,CAAC,MAAM;IACdS,QAAQ,CAACG,WAAW,CAACN,eAAD,CAAZ,CAAR,CADc,CAEhB;EACC,CAHQ,EAGN,CAACD,OAAD,EAAUC,eAAV,CAHM,CAAT;EAKA,OAAO;IAAEE,KAAF;IAASE;EAAT,CAAP;AACD,CA5DM;;GAAMN,Y"},"metadata":{},"sourceType":"module"}